version: "3.8"

services:
  # Backend API service (development mode)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_VERSION=1.0.0-dev
      - LOG_LEVEL=DEBUG
      - JSON_LOGS=false
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ddosai
      - MODEL_PATH=/app/models
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - postgres
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - ddosai-network

  # Frontend service (development mode)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev
    networks:
      - ddosai-network

  # Redis for caching and pub/sub
  redis:
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - ddosai-network

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:13-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ddosai
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ddosai-network

  # Simulation service (development mode)
  simulation:
    build:
      context: ./simulation
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    environment:
      - BACKEND_URL=http://backend:8000
      - PYTHONPATH=/app
    volumes:
      - ./simulation:/app
    depends_on:
      - backend
    command: python main.py
    networks:
      - ddosai-network

volumes:
  redis-data:
  postgres-data:

networks:
  ddosai-network:
    driver: bridge
