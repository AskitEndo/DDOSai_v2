# Redirect HTTP to HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    # ACME challenge location for Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main frontend application
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ddosai.example.com;
    
    # SSL certificates
    ssl_certificate /etc/nginx/ssl/ddosai.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/ddosai.example.com/privkey.pem;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Root directory
    root /usr/share/nginx/html;
    index index.html;
    
    # Rate limiting
    limit_req zone=frontend burst=20 nodelay;
    
    # Frontend application
    location / {
        proxy_pass http://frontend:80;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache static_cache;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
        expires 1h;
    }
    
    # Static assets with longer cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://frontend:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_cache static_cache;
        proxy_cache_valid 200 302 24h;
        proxy_cache_valid 404 1m;
        expires 7d;
        add_header Cache-Control "public, max-age=604800, immutable";
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://frontend:80/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        access_log off;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
}

# API backend
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.ddosai.example.com;
    
    # SSL certificates
    ssl_certificate /etc/nginx/ssl/api.ddosai.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/api.ddosai.example.com/privkey.pem;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Rate limiting
    limit_req zone=api burst=10 nodelay;
    
    # API endpoints
    location / {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }
    
    # WebSocket endpoint
    location /ws {
        proxy_pass http://backend:8000/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400; # 24 hours
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://backend:8000/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        access_log off;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }
    
    # API documentation
    location /docs {
        proxy_pass http://backend:8000/docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Error handling
    error_page 500 502 503 504 /50x.html;
}

# Grafana dashboard
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name grafana.ddosai.example.com;
    
    # SSL certificates
    ssl_certificate /etc/nginx/ssl/grafana.ddosai.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/grafana.ddosai.example.com/privkey.pem;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Grafana proxy
    location / {
        proxy_pass http://grafana:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Error handling
    error_page 500 502 503 504 /50x.html;
}

# Prometheus (optional, can be restricted to internal access only)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name prometheus.ddosai.example.com;
    
    # SSL certificates
    ssl_certificate /etc/nginx/ssl/prometheus.ddosai.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/prometheus.ddosai.example.com/privkey.pem;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # IP restriction (optional)
    # allow 192.168.1.0/24;
    # deny all;
    
    # Basic authentication
    auth_basic "Prometheus";
    auth_basic_user_file /etc/nginx/auth/.htpasswd;
    
    # Prometheus proxy
    location / {
        proxy_pass http://prometheus:9090;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Error handling
    error_page 500 502 503 504 /50x.html;
}